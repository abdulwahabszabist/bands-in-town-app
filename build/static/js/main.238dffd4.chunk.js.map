{"version":3,"sources":["assets/icons/logo.svg","constants/api-constants.js","constants/theme.js","constants/index.js","utils/helpers.js","actions/app-actions.js","reducers/app-reducer.js","assets/icons/index.js","views/Home/Home.js","views/Event/Event.js","components/Header.js","components/App/App.js","utils/custom-hooks.js","serviceWorker.js","index.js","assets/icons/facebook.svg","assets/icons/bitFist.svg"],"names":["module","exports","BASE_URL","APP_ID","theme","createMuiTheme","palette","primary","main","secondary","error","red","A400","background","default","AppContext","React","createContext","API","_api","isNothing","R","console","log","isSomething","Object","classNames","keys","map","c","join","trim","AppActionTypes","makeAPICall","endpoint","a","async","fetch","resp","json","toggleAppLoading","bool","type","payload","fetchArtist","artistName","dispatch","getState","artistInfo","artistEvents","artist","events","localStorage","setItem","appReducer","state","action","isLoading","selectedEvent","AppIcon","width","display","component","rest","style","alt","src","useStyles","makeStyles","searchInput","margin","spacing","backgroundColor","borderRadius","container","marginTop","marginBottom","zIndex","card","minWidth","maxWidth","title","fontSize","text","color","Home","history","lastSearchArtist","classes","inputRef","useRef","useState","selectedDate","setSelectedDate","filteredEvents","setFilteredData","useContext","useEffect","className","backgroundImage","Container","FormControl","fullWidth","variant","OutlinedInput","placeholder","id","defaultValue","current","onChange","debounce","v","value","inputProps","ref","startAdornment","InputAdornment","position","CircularProgress","propOr","Typography","name","Link","href","url","Fab","BITIcon","heigth","FacebookIcon","Grid","justify","alignItems","Badge","badgeContent","utils","DateFnsUtils","DatePicker","label","format","date","selectedEvents","filter","i","moment","datetime","isAfter","item","xs","event","eventDate","sm","md","key","Card","CardContent","venue","to","Button","media","height","Marker","textAlign","justifyContent","transform","Event","match","eventsList","pathOr","eventInfo","find","propEq","fetchEventInfo","params","lineup","CardActionArea","CardMedia","image","image_url","gutterBottom","city","region","CardActions","size","bootstrapURLKeys","defaultCenter","lat","parseFloat","lng","defaultZoom","latitude","longitude","root","flexGrow","menuButton","marginRight","Header","AppBar","Toolbar","AppLogo","App","reducerFn","initialState","useReducer","stateRef","customDispatch","useCallback","prevState","useMemo","groupCollapsed","groupEnd","useCustomReducer","getItem","appContext","Provider","ThemeProvider","MuiTheme","CssBaseline","basename","exact","path","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.238dffd4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.91ed5648.svg\";","export const BASE_URL = 'https://rest.bandsintown.com';\nexport const APP_ID = 'bands_in_town';\n\n//these are the two constants used to fetch data from api call. one is base url and other one is app id that i used to fetch data","import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app here we can change color scheme for the app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#556cd6'\n    },\n    secondary: {\n      main: '#19857b'\n    },\n    error: {\n      main: red.A400\n    },\n    background: {\n      default: '#fff'\n    }\n  }\n});\n\nexport default theme;\n","import React from 'react';\nimport * as _api from './api-constants';\n\nexport const AppContext = React.createContext('AppContext');\nexport { default as MuiTheme } from './theme';\nexport const API = _api;\n","/* eslint-disable no-underscore-dangle */\n/* eslint-disable no-bitwise */\nimport * as R from 'ramda';\n\nexport const logger = R.tap(console.log);\n\nexport const isNothing = R.either(R.isEmpty, R.isNil);\n\nexport const isSomething = R.complement(isNothing);\n\nexport const isAllNothing = R.ifElse(\n  R.is(Object),\n  R.pipe(R.values, R.all(isNothing)),\n  R.all(isNothing)\n);\n\nexport const isAllSomething = R.ifElse(\n  R.is(Object),\n  R.pipe(R.values, R.all(isSomething)),\n  R.all(isSomething)\n);\n\nexport const classnames = R.curry(classNames => {\n  const classes = Object.keys(R.defaultTo([], classNames)).map(c => (classNames[c] ? `${c} ` : ''));\n  return classes.join('').trim();\n});\n","import { API } from './../constants';\nimport { isSomething } from '../utils';\nimport { pathOr, find, propEq } from 'ramda';\n\nexport const AppActionTypes = {\n  TOGGLE_APP_LOADING: 'TOGGLE_APP_LOADING',\n  FETCH_ARTIST_INFO: 'FETCH_ARTIST_INFO',\n  FETCH_ARTIST_EVENTS: 'FETCH_ARTIST_EVENTS',\n  FETCH_EVENT_INFO: 'FETCH_EVENT_INFO'\n};\n\nasync function makeAPICall(endpoint) {\n  try {\n    const resp = await await fetch(endpoint);\n    return resp.json();\n  } catch (error) {\n    console.error('Error while fetching data: ', error);\n  }\n}\n\nexport const toggleAppLoading = bool => {\n  return {\n    type: AppActionTypes.TOGGLE_APP_LOADING,\n    payload: bool\n  };\n};\n\n//this function is used to fetch events list from api\nexport const fetchEventInfo = id => {\n  return async (dispatch, getState) => {\n    dispatch(toggleAppLoading(true));\n    const eventsList = pathOr([], ['events'], getState());\n    const eventInfo = find(propEq('id', id), eventsList);\n\n    dispatch({\n      type: AppActionTypes.FETCH_EVENT_INFO,\n      payload: eventInfo\n    });\n    dispatch(toggleAppLoading(false));\n  };\n};\n\n//this function is used to fetch artist list against search input entered to search box of the app\nexport const fetchArtist = artistName => {\n  return async (dispatch, getState) => {\n    dispatch(toggleAppLoading(true));\n    const artistInfo = await makeAPICall( //wait for fetching artist list\n      `${API.BASE_URL}/artists/${artistName}?app_id=${API.APP_ID}`\n    );\n    let artistEvents = [];\n    if (isSomething(artistInfo)) {\n      artistEvents = await makeAPICall( // if artist is there in above call then check its events\n        `${API.BASE_URL}/artists/${artistName}/events?app_id=${API.APP_ID}`\n      );\n    }\n    dispatch({ // save artist name and events that will be viewed in app in views.\n      type: AppActionTypes.FETCH_ARTIST_INFO,\n      payload: {\n        artist: artistInfo,\n        events: artistEvents\n      }\n    });\n    if (isSomething(artistInfo)) {  // data stored in localstorage for Cache management\n      localStorage.setItem('artist', artistName);\n    }\n    dispatch(toggleAppLoading(false));\n  };\n};\n","import { AppActionTypes } from '../actions/app-actions';\n\nexport const appReducer = (state, action = {}) => {\n  const { type, payload } = action;\n  switch (type) {\n    case AppActionTypes.TOGGLE_APP_LOADING:\n      return {\n        ...state,\n        isLoading: payload\n      };\n\n    case AppActionTypes.FETCH_EVENT_INFO:\n      return {\n        ...state,\n        selectedEvent: payload\n      };\n\n    case AppActionTypes.FETCH_ARTIST_INFO:\n      return {\n        ...state,\n        ...payload\n      };\n\n    default:\n      return state;\n  }\n};\n","import React from 'react';\n\nexport const AppIcon = ({ width = 18, display = 'initial', component, ...rest }) => {\n  const style = { width, display, ...(rest.style || {}) };\n  return <img alt=\"\" src={component} style={style} {...rest} />;\n};\n\n// export const AppIcon = component => props => <CustomIcon component={component} {...props} />;\n","import React, { useRef, useEffect, useContext, useState } from 'react';\n\nimport {\n  Container,\n  makeStyles,\n  InputAdornment,\n  FormControl,\n  OutlinedInput,\n  CircularProgress,\n  Typography,\n  IconButton,\n  Fab,\n  Link,\n  Badge,\n  CardContent,\n  Card,\n  Button,\n  Grid\n} from '@material-ui/core';\nimport moment from 'moment';\nimport { debounce } from 'throttle-debounce';\nimport DateFnsUtils from '@date-io/date-fns';\n\nimport { MuiPickersUtilsProvider, DatePicker } from '@material-ui/pickers';\n\nimport SearchIcon from '@material-ui/icons/Search';\nimport { isSomething, isNothing } from '../../utils';\nimport { fetchArtist } from '../../actions/app-actions';\nimport { AppContext } from '../../constants';\n\nimport FacebookIcon from './../../assets/icons/facebook.svg';\nimport BITIcon from './../../assets/icons/bitFist.svg';\nimport { AppIcon } from '../../assets/icons';\nimport { filter, propOr } from 'ramda';\nimport { NavLink } from 'react-router-dom';\n\nconst useStyles = makeStyles(theme => ({\n  searchInput: {\n    margin: theme.spacing(1),\n    backgroundColor: '#fff',\n    borderRadius: 5\n  },\n  container: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n    zIndex: 10\n  },\n  card: {\n    minWidth: 275,\n    maxWidth: 350\n  },\n  title: {\n    fontSize: 14\n  },\n  text: {\n    color: '#fff'\n  }\n}));\n\n//home page code starts from here\n\nconst Home = ({ history, lastSearchArtist }) => {\n  const classes = useStyles();\n  const inputRef = useRef(lastSearchArtist);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [filteredEvents, setFilteredData] = useState([]);\n  const {\n    state: { isLoading, artist = {}, events = [] },\n    dispatch\n  } = useContext(AppContext);\n\n  useEffect(() => {\n    setFilteredData(events);\n  }, [events]);\n\n  const handleSearch = v => {\n    dispatch(fetchArtist(v));\n  };\n\n  const handleDateChange = date => {\n    setSelectedDate(date);\n    const selectedEvents = filter(i => moment(i.datetime).isAfter(date), events);\n    setFilteredData(selectedEvents);\n  };\n\n  return ( // main view code starts here. here we use artist name and its events list \n    <div className=\"home-container\" style={{ backgroundImage: `url(${artist['image_url']})` }}>\n      {isSomething(artist) && ( //whole view is set using material.ui that is component of react js\n        <div\n          className=\"artist-backlay\"\n          style={{ backgroundImage: `url(${artist['image_url']})` }}\n        />\n      )}\n      <Container maxWidth=\"sm\" className={classes.container}>\n        <FormControl fullWidth className={classes.searchInput} variant=\"outlined\">\n          <OutlinedInput\n            placeholder=\"Search Artists...\"\n            id=\"outlined-adornment-amount\"\n            defaultValue={inputRef.current}\n            onChange={debounce(1000, false, () => {\n              handleSearch(inputRef.current.value);\n            })}\n            inputProps={{\n              ref: inputRef\n            }}\n            startAdornment={\n              <InputAdornment position=\"start\">\n                <SearchIcon />\n              </InputAdornment>\n            }\n          />\n        </FormControl>\n      </Container>\n      {isLoading ? (\n        <div className=\"cover-all\">\n          <CircularProgress />\n        </div>\n      ) : (\n        <Container maxWidth=\"lg\" className={classes.container}>\n          {isNothing(propOr('', 'value', inputRef.current)) ? (\n            <Typography>Search any Artist to view its upcoming events</Typography>\n          ) : isNothing(artist) && isSomething(propOr('', 'value', inputRef.current)) ? (\n            <Typography>\n              No Artist exists with name <b>{propOr('', 'value', inputRef.current)}</b>\n            </Typography>\n          ) : (\n            <>\n              <div className=\"artist-info\">\n                <Typography className={classes.text} variant=\"h1\">\n                  {artist.name}\n                </Typography>\n                <div className=\"actions\">\n                  <Link href={artist.url}>\n                    <Fab variant=\"round\">\n                      <AppIcon component={BITIcon} width={20} heigth={20} />\n                    </Fab>\n                  </Link>\n                  <Link href={artist['facebook_page_url']}>\n                    <Fab variant=\"round\">\n                      <AppIcon component={FacebookIcon} width={25} heigth={25} />\n                    </Fab>\n                  </Link>\n                </div>\n              </div>\n              {isNothing(events) ? (\n                <Typography className={classes.text} variant=\"subtitle1\">\n                  No upcoming events found of this Artist\n                </Typography>\n              ) : (\n                <>\n                  <Grid\n                    container\n                    justify=\"space-between\"\n                    alignItems=\"center\"\n                    className=\"events-header\">\n                    <Badge badgeContent={artist['upcoming_event_count']} color=\"primary\">\n                      <Typography className={classes.text} variant=\"subtitle1\">\n                        Upcoming Events\n                      </Typography>\n                    </Badge>\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                      <DatePicker\n                        label=\"Search Events from\"\n                        format=\"MMM dd, yyyy\"\n                        value={selectedDate}\n                        onChange={handleDateChange}\n                      />\n                    </MuiPickersUtilsProvider>\n                  </Grid>\n                  <Grid container className=\"upcoming-events\" spacing={3}>\n                    <Grid item xs={12}>\n                      {isNothing(filteredEvents) && isSomething(events) && (\n                        <Typography className={classes.text} variant=\"h5\">\n                          No events found beyond searched date\n                        </Typography>\n                      )}\n                      {isNothing(events) && (\n                        <Typography className={classes.text} variant=\"h5\">\n                          {artist.name} has no upcoming events\n                        </Typography>\n                      )}\n                    </Grid>\n                    {filteredEvents.map(event => {\n                      const eventDate = moment(event.datetime);\n                      return (\n                        <Grid item xs={12} sm={12} md={6} className=\"event-row\" key={event.id}>\n                          <Card>\n                            <CardContent className=\"content\">\n                              <div className=\"event-date\">\n                                <span className=\"month\">{eventDate.format('MMM')}</span>\n                                <span className=\"day\">{eventDate.format('D')}</span>\n                              </div>\n                              <Typography variant=\"h5\">{event.venue.name}</Typography>\n                              <NavLink to={`/event/${event.id}`}>\n                                <Button variant=\"contained\" color=\"primary\">\n                                  View Event\n                                </Button>\n                              </NavLink>\n                            </CardContent>\n                          </Card>\n                        </Grid>\n                      );\n                    })}\n                  </Grid>\n                </>\n              )}\n            </>\n          )}\n        </Container>\n      )}\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useContext } from 'react';\nimport {\n  Typography,\n  Container,\n  Grid,\n  makeStyles,\n  Card,\n  CardActionArea,\n  CardMedia,\n  CardContent,\n  CardActions,\n  Button,\n  CircularProgress,\n  Link\n} from '@material-ui/core';\nimport GoogleMapReact from 'google-map-react';\nimport moment from 'moment';\nimport InfoIcon from '@material-ui/icons/Info';\n\nimport { AppContext } from '../../constants';\nimport { fetchEventInfo } from '../../actions/app-actions';\nimport { propOr, join } from 'ramda';\n\nconst useStyles = makeStyles({\n  card: {\n    width: '100%'\n  },\n  media: {\n    height: 140\n  }\n});\n\nconst Marker = ({ text }) => (\n  <div\n    title={text}\n    style={{\n      color: 'red',\n      display: 'inline-flex',\n      textAlign: 'center',\n      alignItems: 'center',\n      justifyContent: 'center',\n      borderRadius: '100%',\n      transform: 'translate(-50%, -50%)'\n    }}>\n    <InfoIcon />\n  </div>\n);\n\nconst Event = ({ match }) => {\n  const classes = useStyles();\n  const {\n    state: { selectedEvent = {}, events = [], isLoading = false },\n    dispatch\n  } = useContext(AppContext);\n\n  useEffect(() => {\n    dispatch(fetchEventInfo(match.params.id));\n  }, [events]);\n\n  const { artist = {}, datetime, venue = {}, id, url, lineup = [] } = selectedEvent;\n\n  return (\n    <div className=\"event-container\">\n      {isLoading ? (\n        <div className=\"cover-all\">\n          <CircularProgress />\n        </div>\n      ) : (\n        <Container maxWidth=\"lg\">\n          <Grid container spacing={4}>\n            <Grid item xs={12} sm={12} md={4}>\n              <Card className={classes.card}>\n                <CardActionArea>\n                  <CardMedia\n                    variant=\"outlined\"\n                    className={classes.media}\n                    image={\n                      artist.image_url || 'https://s3.amazonaws.com/bit-photos/artistThumb.jpg'\n                    }\n                    title=\"Artist Image\"\n                  />\n                  <CardContent>\n                    <Typography gutterBottom variant=\"h4\" color=\"primary\">\n                      {artist.name}\n                    </Typography>\n                    <Typography variant=\"body1\" component=\"p\">\n                      {moment(datetime).format('MMM DD, YYYY')} @ {venue.name}\n                    </Typography>\n                    <Typography variant=\"body2\" component=\"h2\">\n                      <b>Lineup:</b> {join(', ', lineup)}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"primary\" component=\"p\">\n                      {venue.city}, {venue.region}\n                    </Typography>\n                  </CardContent>\n                </CardActionArea>\n                <CardActions>\n                  <Link href={url}>\n                    <Button size=\"small\" color=\"primary\">\n                      Learn More\n                    </Button>\n                  </Link>\n                </CardActions>\n              </Card>\n            </Grid>\n            <Grid item xs={12} sm={12} md={8}>\n              <div style={{ width: '100%', height: '400px' }}>\n                <GoogleMapReact\n                  bootstrapURLKeys={{ key: 'AIzaSyAiWUn_8yzwpEo8Dk0OI5sbV2Ys67tIHp8' }}\n                  defaultCenter={{\n                    lat: parseFloat(propOr(53, 'latitude', venue)),\n                    lng: parseFloat(propOr(54, 'longitude', venue))\n                  }}\n                  defaultZoom={11}>\n                  <Marker lat={venue.latitude} lng={venue.longitude} text={venue.name} />\n                </GoogleMapReact>\n              </div>\n            </Grid>\n          </Grid>\n        </Container>\n      )}\n    </div>\n  );\n};\n\nexport default Event;\n","import React from 'react';\nimport { AppBar, Toolbar, IconButton, Typography, makeStyles } from '@material-ui/core';\nimport { AppIcon } from './../assets/icons';\nimport AppLogo from './../assets/icons/logo.svg';\nimport { NavLink } from 'react-router-dom';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  }\n}));\n\nconst Header = () => {\n  const classes = useStyles();\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        {/* <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\"> */}\n        <NavLink to=\"/\">\n          <AppIcon component={AppLogo} width=\"24\" height=\"24\" />\n        </NavLink>\n        {/* </IconButton> */}\n        &nbsp; &nbsp;\n        <Typography variant=\"h6\" className={classes.title}>\n          Bands In Town\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","import React, { useEffect } from 'react';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { CssBaseline } from '@material-ui/core';\n\n// src\nimport { MuiTheme, AppContext } from '../../constants';\nimport { useCustomReducer, isSomething } from './../../utils';\nimport { appReducer } from '../../reducers/app-reducer';\nimport { fetchArtist } from '../../actions/app-actions';\n\n// styles\nimport './App.scss';\nimport Home from '../../views/Home/Home';\nimport Event from '../../views/Event/Event';\nimport Header from '../Header';\n\nfunction App() {\n  const [state, dispatch] = useCustomReducer(appReducer, {\n    isLoading: false,\n    events: [],\n    artist: {}\n  });\n  const lastSearchArtist = localStorage.getItem('artist');\n\n  useEffect(() => {  //this code is used for cache management. untill and unless cache of browser is cleared last search will be available\n    if (isSomething(lastSearchArtist)) {\n      dispatch(fetchArtist(lastSearchArtist));\n    }\n  }, []);\n\n  const appContext = { state, dispatch };\n  return (\n    <AppContext.Provider value={appContext}>\n      <ThemeProvider theme={MuiTheme}>\n        {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n        <div className=\"App\">\n          <CssBaseline />\n          <BrowserRouter basename={'/'}>\n            <Header />\n            <Switch> //these are redirecting urls. this triggers whenever any static url is entered into browser \n              <Route exact path=\"/\" render={() => <Home lastSearchArtist={lastSearchArtist} />} />\n              <Route exact path=\"/event/:id\" component={Event} />\n              <Route exact path=\"*\" render={() => <Redirect to=\"/\" />} />\n            </Switch>\n          </BrowserRouter>\n        </div>\n      </ThemeProvider>\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n","/* eslint-disable no-console */\nimport { useReducer, useCallback, useRef, useMemo, useEffect } from 'react';\n\nexport function useCustomReducer(reducerFn, initialState) {\n  const [state, dispatch] = useReducer(reducerFn, initialState);\n  const stateRef = useRef();\n  const customDispatch = useCallback(action => {\n    if (typeof action === 'function') {\n      return action(customDispatch, () => stateRef.current.state);\n    }\n\n    if (action.type) {\n      stateRef.current.prevState = stateRef.current.state;\n      stateRef.current.action = action;\n      dispatch(action);\n      return undefined;\n    }\n  }, []);\n\n  useMemo(() => {\n    if (stateRef.current && stateRef.current.action && stateRef.current.prevState) {\n      const current = { ...stateRef.current };\n      console.groupCollapsed(\n        `%c action %c${current.action.type} %c@`,\n        'color:#81c784;font-weight:normal;',\n        'font-weight:bold;',\n        'color:#7F7F7F;font-weight:normal;'\n      );\n      console.log('%c prev state', 'color:#9C9D9D;font-weight:bold;', current.prevState);\n      console.log('%c action    ', 'color:#0092FF;font-weight:bold;', current.action);\n      console.log('%c next state', 'color:#15C050;font-weight:bold;', state);\n      console.groupEnd();\n    }\n    stateRef.current = {};\n  }, [state]);\n\n  stateRef.current.state = state;\n  return [state, customDispatch];\n}\n\nexport function useEventListener(eventName, handler, element = document) {\n  const savedHandler = useRef();\n\n  useEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n\n  useEffect(() => {\n    const isSupported = element && element.addEventListener;\n    if (!isSupported) return false;\n\n    const eventListener = event => savedHandler.current(event);\n    element.addEventListener(eventName, eventListener);\n    return () => element.removeEventListener(eventName, eventListener);\n  }, [eventName, element]);\n}\n\nexport function useWhyDidYouUpdate(name, props) {\n  const previousProps = useRef();\n\n  useEffect(() => {\n    if (previousProps.current) {\n      const allKeys = Object.keys({ ...previousProps.current, ...props });\n      const changesObj = {};\n      allKeys.forEach(key => {\n        if (previousProps.current[key] !== props[key]) {\n          changesObj[key] = {\n            from: previousProps.current[key],\n            to: props[key]\n          };\n        }\n      });\n\n      if (Object.keys(changesObj).length) {\n        console.log('[why-did-you-update]', name, changesObj);\n      }\n    }\n\n    previousProps.current = props;\n  });\n}\n\nexport function usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/facebook.809ea75e.svg\";","module.exports = __webpack_public_path__ + \"static/media/bitFist.2a8d630c.svg\";"],"sourceRoot":""}